{"version":3,"sources":["components/presentational/Tile.js","actions.js","components/containers/TileContainer.js","components/presentational/Board.js","components/containers/BoardContainer.js","components/presentational/Buttons.js","components/containers/ButtonsContainer.js","reducers/sudokuReducers.js","reducers/reducers.js","store.js","components/presentational/App.js","serviceWorker.js","index.js"],"names":["Tile","id","tile","initialBoard","updateBoard","className","type","min","max","disabled","value","onChange","e","target","setDifficulty","difficulty","connect","state","sudokuReducers","dispatch","Board","board","sudokuBoard","map","key","Buttons","startSudoku","restartSudoku","checkSudoku","solveSudoku","name","onClick","initialState","action","level","newSudoku","sudoku","generate","tileValue","correctTileValue","length","splice","join","solve","alert","combineReducers","store","createStore","reducers","composeWithDevTools","App","ButtonsContainer","BoardContainer","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1b98745d.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Tile = ({ id, tile, initialBoard, updateBoard }) => {\r\n  return (\r\n    <div className=\"Tile\">\r\n      <input\r\n        type=\"number\"\r\n        min=\"1\"\r\n        max=\"9\"\r\n        disabled={initialBoard[id] !== \".\" ? true : false}\r\n        value={tile}\r\n        onChange={e => updateBoard(e.target.value, id)}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Tile;\r\n","export const START_SUDOKU = \"START_SUDOKU\";\r\nexport const SET_DIFFICULTY = \"SET_DIFFICULTY\";\r\nexport const RESTART_SUDOKU = \"RESTART_SUDOKU\";\r\nexport const SOLVE_SUDOKU = \"SOLVE_SUDOKU\";\r\nexport const CHECK_SUDOKU = \"CHECK_SUDOKU\";\r\nexport const UPDATE_BOARD = \"UPDATE_BOARD\";\r\n\r\nexport const startSudoku = () => ({\r\n  type: START_SUDOKU\r\n});\r\n\r\nexport const setDifficulty = difficulty => ({\r\n  type: SET_DIFFICULTY,\r\n  difficulty\r\n});\r\n\r\nexport const restartSudoku = () => ({\r\n  type: RESTART_SUDOKU\r\n});\r\n\r\nexport const solveSudoku = () => ({\r\n  type: SOLVE_SUDOKU\r\n});\r\n\r\nexport const checkSudoku = () => ({\r\n  type: CHECK_SUDOKU\r\n});\r\n\r\nexport const updateBoard = (value, id) => ({\r\n  type: UPDATE_BOARD,\r\n  value,\r\n  id\r\n});\r\n","import { connect } from \"react-redux\";\r\nimport Tile from \"../presentational/Tile\";\r\nimport { updateBoard } from \"../../actions\";\r\n\r\nconst mapStateToProps = state => ({\r\n  initialBoard: state.sudokuReducers.initialBoard\r\n});\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  updateBoard: (value, id) => dispatch(updateBoard(value, id))\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Tile);\r\n","import React from \"react\";\r\nimport Tile from \"../containers/TileContainer\";\r\n\r\nconst Board = ({ board }) => {\r\n  const sudokuBoard = [...board];\r\n  return (\r\n    <div className=\"Board\">\r\n      {sudokuBoard.map((tile, id) => (\r\n        <Tile key={id} id={id} tile={tile}></Tile>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n","import { connect } from \"react-redux\";\r\nimport Board from \"../presentational/Board\";\r\n\r\nconst mapStateToProps = state => ({\r\n  board: state.sudokuReducers.board\r\n});\r\n\r\nexport default connect(mapStateToProps)(Board);\r\n","import React from \"react\";\r\n\r\nconst Buttons = ({\r\n  startSudoku,\r\n  restartSudoku,\r\n  checkSudoku,\r\n  solveSudoku,\r\n  setDifficulty,\r\n  difficulty\r\n}) => {\r\n  return (\r\n    <div className=\"btn_container\">\r\n      <select\r\n        className=\"btn_select\"\r\n        name=\"difficulty\"\r\n        value={difficulty}\r\n        onChange={e => {\r\n          setDifficulty(e.target.value);\r\n          startSudoku();\r\n        }}\r\n      >\r\n        <option value=\"easy\">easy</option>\r\n        <option value=\"medium\">medium</option>\r\n        <option value=\"hard\">hard</option>\r\n        <option value=\"very-hard\">very hard</option>\r\n        <option value=\"insane\">insane</option>\r\n        <option value=\"inhuman\">inhuman</option>\r\n      </select>\r\n\r\n      <button onClick={startSudoku}>New Game</button>\r\n      <button onClick={restartSudoku}>Restart</button>\r\n      <button onClick={checkSudoku}>Check</button>\r\n      <button onClick={solveSudoku}>Solve</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Buttons;\r\n","import { connect } from \"react-redux\";\r\nimport Buttons from \"../presentational/Buttons\";\r\nimport {\r\n  startSudoku,\r\n  restartSudoku,\r\n  checkSudoku,\r\n  solveSudoku,\r\n  setDifficulty\r\n} from \"../../actions\";\r\n\r\nconst mapDispatchToProps = dispatch => ({\r\n  startSudoku: () => dispatch(startSudoku()),\r\n  restartSudoku: () => dispatch(restartSudoku()),\r\n  checkSudoku: () => dispatch(checkSudoku()),\r\n  solveSudoku: () => dispatch(solveSudoku()),\r\n  setDifficulty: difficulty => dispatch(setDifficulty(difficulty))\r\n});\r\n\r\nconst mapStateToProps = state => ({\r\n  difficulty: state.difficulty\r\n});\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Buttons);\r\n","import {\r\n  START_SUDOKU,\r\n  SET_DIFFICULTY,\r\n  RESTART_SUDOKU,\r\n  SOLVE_SUDOKU,\r\n  CHECK_SUDOKU,\r\n  UPDATE_BOARD\r\n} from \"../actions\";\r\nimport sudoku from \"sudoku-umd\";\r\n\r\nconst initialState = {\r\n  initialBoard: \"\",\r\n  board: \"\",\r\n  difficulty: \"\"\r\n};\r\n\r\nconst sudokuReducers = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case SET_DIFFICULTY:\r\n      return {\r\n        ...state,\r\n        difficulty: action.difficulty\r\n      };\r\n    case START_SUDOKU:\r\n      const level = state.difficulty;\r\n      const newSudoku = sudoku.generate(level);\r\n      return {\r\n        difficulty: level,\r\n        initialBoard: [...newSudoku],\r\n        board: [...newSudoku]\r\n      };\r\n    case UPDATE_BOARD:\r\n      let board = [...state.board];\r\n      let tileValue = action.value;\r\n      const correctTileValue =\r\n        [...tileValue].length > 1\r\n          ? [...tileValue].splice(0, 1).join(\"\")\r\n          : tileValue;\r\n      board.splice(action.id, 1, correctTileValue);\r\n      if (correctTileValue === \"0\") {\r\n        return {\r\n          ...state\r\n        };\r\n      } else {\r\n        return {\r\n          ...state,\r\n          board: board\r\n        };\r\n      }\r\n    case RESTART_SUDOKU:\r\n      return {\r\n        ...state,\r\n        board: state.initialBoard\r\n      };\r\n    case CHECK_SUDOKU:\r\n      const checkSudoku = sudoku.solve(state.board);\r\n      if (!checkSudoku) {\r\n        alert(`There is no solution.\\nImprove your sudoku.`);\r\n      } else {\r\n        alert(`You're on the right way!\\nKeep going!`);\r\n      }\r\n      return {\r\n        ...state\r\n      };\r\n    case SOLVE_SUDOKU:\r\n      const solveSudoku = sudoku.solve(state.initialBoard);\r\n      return {\r\n        ...state,\r\n        board: [...solveSudoku]\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default sudokuReducers;\r\n","import { combineReducers } from \"redux\";\r\nimport sudokuReducers from \"./sudokuReducers\";\r\n\r\nexport default combineReducers({\r\n  sudokuReducers\r\n});\r\n","import { createStore } from \"redux\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\nimport reducers from \"./reducers/reducers\";\r\n\r\nconst store = createStore(reducers, composeWithDevTools());\r\n\r\nexport default store;\r\n","import React, { Component } from \"react\";\nimport BoardContainer from \"../containers/BoardContainer\";\nimport ButtonsContainer from \"../containers/ButtonsContainer\";\nimport { startSudoku, setDifficulty } from \"../../actions\";\nimport store from \"../../store\";\nimport \"./App.css\";\n\nclass App extends Component {\n  componentDidMount() {\n    store.dispatch(setDifficulty(\"easy\"));\n    store.dispatch(startSudoku());\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1 className=\"App_title\">Sudoku</h1>\n        <ButtonsContainer></ButtonsContainer>\n        <BoardContainer></BoardContainer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/presentational/App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}